-- Final project

-- 1. Pull overall session and order volume, trended by quarter for the life og the business. 
SELECT
	YEAR(website_sessions.created_at) AS year,
	QUARTER(website_sessions.created_at) AS quarter,
	COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders
FROM website_sessions
	LEFT JOIN orders
		ON website_sessions.website_session_id = orders.website_session_id
WHERE website_sessions.created_at < '2015-01-01'
GROUP BY 1,2
;

-- 2. Show quarterly figures since we launched, for session-to-order conversion rate, revenue per order, and revenue per session.
SELECT
	YEAR(website_sessions.created_at) AS year,
	QUARTER(website_sessions.created_at) AS quarter,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_cvr,
    ROUND(SUM(price_usd)/COUNT(DISTINCT orders.order_id),2) AS rev_per_order,
    ROUND(SUM(price_usd)/COUNT(DISTINCT website_sessions.website_session_id),2) AS rev_per_session
FROM website_sessions
	LEFT JOIN orders
		ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
;

-- 3. Pull a quarterly view or orders from gsearch nonbrand, bsearch nonbrand, brand search overall, organic search, and direct type-in.
SELECT
	YEAR(website_sessions.created_at) AS year,
    QUARTER(website_sessions.created_at) AS qtr,
    COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' and utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS gsearch_nonbrand_orders,
    COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' and utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS bsearch_nonbrand_orders,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN orders.order_id ELSE NULL END) AS brand_search_orders,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NOT NULL THEN orders.order_id ELSE NULL END) AS organic_search_orders,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NULL THEN orders.order_id ELSE NULL END) AS direct_type_in_orders
FROM website_sessions
	LEFT JOIN orders
		ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
;

-- 4. Show the overall session-to-order conversion rate trends for those same channels, by quarter. Please also make a note of any periods where we made major improvements or optimizations.
SELECT
	YEAR(website_sessions.created_at) AS year,
    QUARTER(website_sessions.created_at) AS qtr,
    COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' and utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END)
    /COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' and utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_nonbrand_cvr,
    COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' and utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END)
    /COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' and utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_nonbrand_cvr,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN orders.order_id ELSE NULL END)
    /COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN website_sessions.website_session_id ELSE NULL END) AS brand_search_cvr,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NOT NULL THEN orders.order_id ELSE NULL END)
    /COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_cvr,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NULL THEN orders.order_id ELSE NULL END)
    /COUNT(DISTINCT CASE WHEN utm_source IS NULL and http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_cvrs
FROM website_sessions
	LEFT JOIN orders
		ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
;

-- 5. Pull monthly trending for revenue and margin by product, along with total revenue and margin. Note anything you notice about seasonality.
SELECT* FROM order_items;
SELECT
	YEAR(created_at) AS year,
    MONTH(created_at) AS month,
    SUM(CASE WHEN order_items.product_id = 1 THEN price_usd ELSE NULL END) AS prod_1_rev,
    SUM(CASE WHEN order_items.product_id = 1 THEN price_usd - cogs_usd ELSE NULL END) AS prod_1_margin,
    SUM(CASE WHEN order_items.product_id = 2 THEN price_usd ELSE NULL END) AS prod_2_rev,
    SUM(CASE WHEN order_items.product_id = 2 THEN price_usd - cogs_usd ELSE NULL END) AS prod_2_margin,
    SUM(CASE WHEN order_items.product_id = 3 THEN price_usd ELSE NULL END) AS prod_3_rev,
    SUM(CASE WHEN order_items.product_id = 3 THEN price_usd - cogs_usd ELSE NULL END) AS prod_3_margin,
    SUM(CASE WHEN order_items.product_id = 4 THEN price_usd ELSE NULL END) AS prod_4_rev,
    SUM(CASE WHEN order_items.product_id = 4 THEN price_usd - cogs_usd ELSE NULL END) AS prod_4_margin,
    SUM(price_usd) AS total_revenue,
    SUM(price_usd - cogs_usd) AS total_margin
FROM order_items
GROUP BY 1,2
ORDER BY 1,2
;

-- 6. Pull monthly sessions to the /products page, and show how the % of those sessions clicking through another page has changed over time, along with a view of how conversion from /products to placing an order has improved.
CREATE TEMPORARY TABLE products_pageviews;
SELECT
	website_session_id,
    website_pageview_id,
    pageview_url,
    created_at
FROM website_pageviews
WHERE pageview_url = '/products'
;

SELECT
	YEAR(products_pageviews.created_at) AS year,
    MONTH(products_pageviews.created_at) AS month,
    COUNT(DISTINCT products_pageviews.website_session_id) AS sessions_to_products_page,
    -- COUNT(DISTINCT CASE WHEN website_pageviews.pageview_url IN('/the-original-mr-fuzzy','/the-forever-love-bear','/the-birthday-sugar-panda','/the-hudson-river-mini-bear') THEN products_pageviews.website_session_id ELSE NULL END) AS sessions_click_through,
	COUNT(DISTINCT CASE WHEN website_pageviews.pageview_url IN('/the-original-mr-fuzzy','/the-forever-love-bear','/the-birthday-sugar-panda','/the-hudson-river-mini-bear') THEN products_pageviews.website_session_id ELSE NULL END)
    /COUNT(DISTINCT products_pageviews.website_session_id) AS products_page_clickthru_rt,
    -- COUNT(DISTINCT CASE WHEN website_pageviews.pageview_url = '/thank-you-for-your-order' THEN products_pageviews.website_session_id ELSE NULL END) AS orders,
    COUNT(DISTINCT CASE WHEN website_pageviews.pageview_url = '/thank-you-for-your-order' THEN products_pageviews.website_session_id ELSE NULL END)
    /COUNT(DISTINCT products_pageviews.website_session_id) AS session_to_order_cvr
FROM products_pageviews
	LEFT JOIN website_pageviews
		ON products_pageviews.website_session_id = website_pageviews.website_session_id
			AND website_pageviews.website_pageview_id > products_pageviews.website_pageview_id
GROUP BY 1,2
;

-- 7. Pull sales data since 2014-12-05 (4th product launch as primary) and show how well each product cross-sells from one another.
CREATE TEMPORARY TABLE primary_products;
SELECT
	order_id,
    primary_product_id,
    created_at AS ordered_at
FROM orders
WHERE created_at > '2014-12-05'
;

SELECT
	primary_products.*,
    order_items.product_id AS cross_sell_product_id
FROM primary_products
	LEFT JOIN order_items
		ON order_items.order_id = primary_products.order_id
        AND order_items.is_primary_item = 0
;

SELECT
	primary_product_id,
    COUNT(DISTINCT order_id) AS total_orders,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END) AS xsold_p1,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END) AS xsold_p2,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END) AS xsold_p3,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END) AS xsold_p4,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS xsell_p1_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS xsell_p2_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS xsell_p3_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS xsell_p4_rt
FROM
(
SELECT
	primary_products.*,
    order_items.product_id AS cross_sell_product_id
FROM primary_products
	LEFT JOIN order_items
		ON order_items.order_id = primary_products.order_id
        AND order_items.is_primary_item = 0
) AS cross_sell
GROUP BY 1
;

-- 8. Based on all the analysis you've done, could you share some recommendations and opportunities for us going forward?
	/* 
    Based on the cross-sell success of our 4th product, the minibear, I'd suggest looking in to adding more lower price-point options to the store. 
    The minibear cross-sold at least 20% of the time when customers were already purchasing the other products. Adding more lower-priced items could continue to increase
    the average revenue per order.
    
    Based on the seasonality of the products, the money spent on marketing and paid campaigns will likely go the furthest during the holiday season.
    
    Definitely do not forget about the repeat visitors to the website. Their conversion rate is 1.3% higher and their revenue per session is $.80 higher than new visitors. 
    We also found that visitors who make a second visit are more likely to come back a third time. Perhaps some marketing money should be spent getting visitors back to the website if they didn't make a purchase initially. 
    */
